{"version":3,"sources":["media/beep.wav","components/clock.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Break","props","className","id","onClick","increment","breakLength","e","decrement","Session","sessionLength","StartStop","countdown","count","class","reset","Clock","state","mins","secs","session","handleCount","bind","playRef","React","createRef","manageStroke","endTime","timer","this","setState","myInterval","setInterval","startTime","Date","now","current","currentTime","play","console","log","clearInterval","currentTarget","style","circle","strokeDasharray","strokeDashoffset","transition","src","beep","ref","height","width","ry","rx","cx","cy","Component","App","store","configureStore","reducer","counter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8fb7c58.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/beep.733bd01c.wav\";","import React from \"react\";\r\nimport beep from \"../media/beep.wav\";\r\nimport \"../styles/calc.css\";\r\n\r\n//challenging part was to create an accurate timer to execute at exact 1 second\r\n//I used a Dynamic timer timer that changes the time from 1second to about 0.92-0.96 millisecond dynamically based on the time it took to execute the function so as to better display the next time;\r\n\r\nclass Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mins: 25,\r\n      secs: 0,\r\n      breakLength: 5,\r\n      sessionLength: 25,\r\n      countdown: false,\r\n      session: \"Session\",\r\n      count: 25,\r\n    };\r\n    this.handleCount = this.handleCount.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.playRef = React.createRef();\r\n    this.decrement = this.decrement.bind(this);\r\n    this.increment = this.increment.bind(this);\r\n    this.manageStroke = this.manageStroke.bind(this);\r\n  }\r\n  handleCount() {\r\n    let timer = 1000; //timer initialized to 1000ms=1000s;\r\n    let endTime; //timestamp at the end of the code\r\n    let usedTime; //time used to run the code\r\n    this.setState((state) => ({\r\n      countdown: !state.countdown,\r\n      count: !state.count ? state.mins : state.count,\r\n    }));\r\n    let myInterval = setInterval(() => {\r\n      timer = 1000; //timer reset to give so as not to deviate and keep reducing the milliseconds but make 1000 the standard\r\n      let startTime = Date.now(); //records timestamp of code execution\r\n      if (this.state.countdown) {\r\n        if (this.state.secs > 0) {\r\n          this.setState((state) => ({ secs: state.secs - 1 }));\r\n        }\r\n        if (this.state.secs === 0) {\r\n          if (this.state.mins === 0) {\r\n            this.playRef.current.currentTime = 0;\r\n            this.playRef.current.play();\r\n            if (this.state.session === \"Session\") {\r\n              this.setState((state) => ({\r\n                session: \"Break\",\r\n                mins: state.breakLength,\r\n                secs: 0,\r\n                count: state.breakLength,\r\n              }));\r\n              console.log(this.state.count);\r\n            } else if (this.state.session === \"Break\") {\r\n              this.setState((state) => ({\r\n                session: \"Session\",\r\n                mins: state.sessionLength,\r\n                secs: 0,\r\n                count: state.sessionLength,\r\n              }));\r\n              console.log(this.state.count);\r\n            }\r\n          } else {\r\n            this.setState((state) => ({ mins: state.mins - 1, secs: 59 }));\r\n          }\r\n        }\r\n        endTime = Date.now(); //time stamp code completed execution\r\n        usedTime = endTime - startTime; //time ued for code to execute\r\n        timer -= usedTime; // time to use for the next operation which is a few milliseconds less to make it more accurate\r\n        //console.log(endTime, startTime, usedTime, startTime > endTime, timer);\r\n        //expected output: both start and endTime appear in milliseconds, endTime is larger than startTime , used time is a very mostly less than 10, false, timer<1000;\r\n      } else {\r\n        clearInterval(myInterval);\r\n      }\r\n    }, timer);\r\n  }\r\n  reset() {\r\n    this.playRef.current.currentTime = 0;\r\n    clearInterval(this.handleCount);\r\n    this.setState((state) => ({\r\n      countdown: false,\r\n      mins: 25,\r\n      secs: 0,\r\n      session: \"Session\",\r\n      breakLength: 5,\r\n      sessionLength: 25,\r\n      count: \"25\",\r\n    }));\r\n  }\r\n  decrement(e) {\r\n    if (!this.state.countdown) {\r\n      if (e.currentTarget.id === \"break-decrement\") {\r\n        if (this.state.breakLength > 1 && this.state.breakLength <= 60) {\r\n          this.setState((state) => ({\r\n            breakLength: state.breakLength - 1,\r\n            mins:\r\n              state.session === \"Break\" ? state.breakLength - 1 : state.mins,\r\n            secs: state.session === \"Break\" ? 0 : state.secs,\r\n            count:\r\n              state.session === \"Break\" ? state.breakLength - 1 : state.count,\r\n          }));\r\n        }\r\n      } else {\r\n        if (this.state.sessionLength > 1 && this.state.sessionLength <= 60) {\r\n          this.setState((state) => ({\r\n            sessionLength: state.sessionLength - 1,\r\n            mins:\r\n              state.session === \"Session\"\r\n                ? state.sessionLength - 1\r\n                : state.mins,\r\n            secs: state.session === \"Session\" ? 0 : state.secs,\r\n            count:\r\n              state.session === \"Session\"\r\n                ? state.sessionLength - 1\r\n                : state.count,\r\n          }));\r\n        }\r\n      }\r\n    }\r\n  }\r\n  increment(e) {\r\n    if (!this.state.countdown) {\r\n      console.log(e.currentTarget.id);\r\n      if (e.currentTarget.id === \"break-increment\") {\r\n        if (this.state.breakLength >= 1 && this.state.breakLength < 60) {\r\n          this.setState((state) => ({\r\n            breakLength: state.breakLength + 1,\r\n            mins:\r\n              state.session === \"Break\" ? state.breakLength + 1 : state.mins,\r\n            secs: state.session === \"Break\" ? 0 : state.secs,\r\n            count:\r\n              state.session === \"Break\" ? state.breakLength + 1 : state.count,\r\n          }));\r\n        }\r\n      } else {\r\n        if (this.state.sessionLength >= 1 && this.state.sessionLength < 60) {\r\n          this.setState((state) => ({\r\n            sessionLength: state.sessionLength + 1,\r\n            mins:\r\n              state.session === \"Session\"\r\n                ? state.sessionLength + 1\r\n                : state.mins,\r\n            secs: state.session === \"Session\" ? 0 : state.secs,\r\n            count:\r\n              state.session === \"Session\"\r\n                ? state.sessionLength + 1\r\n                : state.count,\r\n          }));\r\n        }\r\n      }\r\n    }\r\n  }\r\n  manageStroke() {\r\n    let offset = 794.83 - (this.state.mins / this.state.count) * 794.83;\r\n    return offset;\r\n  }\r\n  render() {\r\n    const style = {\r\n      circle: {\r\n        strokeDasharray: \"794.83\",\r\n        strokeDashoffset: this.manageStroke(),\r\n        transition: `all linear ${this.state.countdown ? \"60s\" : \"0.3s\"}`,\r\n      },\r\n    };\r\n    return (\r\n      <div className=\"clock\">\r\n        <audio src={beep} id=\"beep\" ref={this.playRef} />\r\n        <h3 className=\"header\">POMODORO CLOCK</h3>\r\n        <Break\r\n          className=\"break\"\r\n          decrement={this.decrement}\r\n          breakLength={this.state.breakLength}\r\n          increment={this.increment}\r\n        />\r\n        <Session\r\n          className=\"session\"\r\n          decrement={this.decrement}\r\n          sessionLength={this.state.sessionLength}\r\n          increment={this.increment}\r\n        />\r\n        <section className=\"main\">\r\n          <svg className=\"progress-ring\" height=\"100%\" width=\"100%\">\r\n            <g>\r\n              <ellipse\r\n                style={style.circle}\r\n                className=\"progress-ring_circle\"\r\n                ry=\"126\"\r\n                rx=\"127\"\r\n                cx=\"50%\"\r\n                cy=\"53%\"\r\n              />\r\n              {/* <path\r\n                id=\"base-timer-path-remaining\"\r\n                stroke-dasharray=\"283\"\r\n                class=\"base-timer__path-remaining ${remainingPathColor}\"\r\n                d=\"\r\n          M 50, 50\r\n          m -45, 0\r\n          a 45,45 0 1,0 90,0\r\n          a 45,45 0 1,0 -90,0\r\n        \"\r\n              ></path> */}\r\n            </g>\r\n          </svg>\r\n          <p id=\"timer-label\">{this.state.session}</p>\r\n          <div id=\"time-left\">\r\n            {this.state.mins < 10 ? `0${this.state.mins}` : this.state.mins}:\r\n            {this.state.secs < 10 ? `0${this.state.secs}` : this.state.secs}\r\n          </div>\r\n        </section>\r\n        <StartStop\r\n          countdown={this.state.countdown}\r\n          count={this.handleCount}\r\n          reset={this.reset}\r\n          className=\"startStop\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Break(props) {\r\n  return (\r\n    <div className=\"break\">\r\n      <div id=\"break-label\">Break length</div>\r\n      <div className=\"break-buttons\">\r\n        <button id=\"break-increment\" onClick={props.increment}>\r\n          <i className=\"fa fa-arrow-up fa-2x\" />\r\n        </button>\r\n        <p id=\"break-length\">{props.breakLength}</p>\r\n        <button id=\"break-decrement\" onClick={(e) => props.decrement(e)}>\r\n          <i className=\"fa fa-arrow-down fa-2x\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Session(props) {\r\n  return (\r\n    <div className=\"session\">\r\n      <div id=\"session-label\">Session length</div>\r\n      <div className=\"session-buttons\">\r\n        <button id=\"session-increment\" onClick={props.increment}>\r\n          <i className=\"fa fa-arrow-up fa-2x\" />\r\n        </button>\r\n        <p id=\"session-length\">{props.sessionLength}</p>\r\n        <button id=\"session-decrement\" onClick={props.decrement}>\r\n          <i className=\"fa fa-arrow-down fa-2x\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction StartStop(props) {\r\n  return (\r\n    <div className=\"startStop\">\r\n      {props.countdown ? (\r\n        <button id=\"start_stop\" onClick={props.count}>\r\n          <i class=\"fa fa-pause fa-3x\"></i>\r\n        </button>\r\n      ) : (\r\n        <button id=\"start_stop\" onClick={props.count}>\r\n          <i class=\"fa fa-play fa-3x\"></i>\r\n        </button>\r\n      )}\r\n      <button id=\"reset\" onClick={props.reset}>\r\n        <i class=\"fa fa-refresh fa-3x\" aria-hidden=\"true\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Clock;\r\n","import React from \"react\";\nimport Clock from \"./components/clock\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Clock />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\n// import counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: \"\",\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}